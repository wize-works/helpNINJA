name: Deploy to Azure Kubernetes

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ${{ secrets.ACR_NAME }}.azurecr.io
  IMAGE_NAME: helpninja

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Log in to Azure Container Registry
      run: |
        az acr login --name ${{ secrets.ACR_NAME }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Install kubelogin
      uses: azure/use-kubelogin@v1
      with:
        kubelogin-version: v0.0.25

    - name: Set AKS Context with admin access
      uses: azure/aks-set-context@v4
      with:
        cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
        resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
        admin: true

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.15.4'

    - name: Check for existing Helm operations
      run: |
        echo "Checking for any stuck Helm operations..."
        
        # Always try to list releases, continue even if namespace doesn't exist
        helm list -n helpninja 2>/dev/null || echo "No existing releases found or namespace doesn't exist"
        
        # Check if namespace exists, create if not
        kubectl get namespace helpninja >/dev/null 2>&1 || kubectl create namespace helpninja
        
        # Check for stuck Helm operations and force cleanup
        echo "Checking for stuck Helm releases..."
        if helm list -n helpninja 2>/dev/null | grep -q helpninja; then
          echo "Found existing Helm release, attempting cleanup..."
          
          # Get release status
          helm status helpninja -n helpninja 2>/dev/null || echo "Could not get release status"
          
          # Force delete any existing release to clear locks
          echo "Force removing existing release to clear any locks..."
          helm uninstall helpninja -n helpninja --wait --timeout=3m 2>/dev/null || echo "No release to uninstall or uninstall completed"
          
          # Clean up any remaining resources
          echo "Cleaning up any remaining Kubernetes resources..."
          kubectl delete all,secrets,configmaps,ingress,hpa -n helpninja --selector=app=helpninja --timeout=60s 2>/dev/null || echo "No resources to clean up"
        fi
        
        # Check for problematic pods
        kubectl get pods -n helpninja 2>/dev/null | grep -E "(Pending|Error|CrashLoopBackOff|ImagePullBackOff)" || echo "No problematic pods found"
        
        echo "Cleanup completed, ready for deployment"

    - name: Deploy to Production
      if: github.ref == 'refs/heads/main'
      run: |
        # Extract the short tag from metadata output
        SHORT_TAG=$(echo "${{ steps.meta.outputs.tags }}" | grep -o 'main-[a-f0-9]\{7\}' | head -1)
        echo "Deploying with image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SHORT_TAG}"
        
        # Verify chart syntax before deployment
        echo "=== VALIDATING HELM CHART ==="
        helm lint ./k8s || echo "Chart linting completed with warnings"
        
        # Deploy directly (skip dry-run to avoid lock conflicts)
        echo "=== PRODUCTION DEPLOYMENT ==="
        helm upgrade --install helpninja ./k8s \
          --namespace helpninja \
          --create-namespace \
          --force \
          --atomic \
          --debug \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${SHORT_TAG} \
          --set secrets.openaiApiKey="${{ secrets.OPENAI_API_KEY }}" \
          --set secrets.openaiChatModel="${{ secrets.OPENAI_CHAT_MODEL }}" \
          --set secrets.openaiEmbedModel="${{ secrets.OPENAI_EMBED_MODEL }}" \
          --set secrets.databaseUrl="${{ secrets.DATABASE_URL }}" \
          --set secrets.stripeSecretKey="${{ secrets.STRIPE_SECRET_KEY }}" \
          --set secrets.stripeWebhookSecret="${{ secrets.STRIPE_WEBHOOK_SECRET }}" \
          --set secrets.stripePriceStarter="${{ secrets.STRIPE_PRICE_STARTER }}" \
          --set secrets.stripePricePro="${{ secrets.STRIPE_PRICE_PRO }}" \
          --set secrets.stripePriceAgency="${{ secrets.STRIPE_PRICE_AGENCY }}" \
          --set secrets.supabaseServiceRoleKey="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
          --set secrets.slackWebhookUrl="${{ secrets.SLACK_WEBHOOK_URL }}" \
          --set secrets.resendApiKey="${{ secrets.RESEND_API_KEY }}" \
          --set supabase.url="${{ secrets.SUPABASE_URL }}" \
          --wait --timeout=10m
          
        echo "Helm deployment completed successfully"

    - name: Check Helm deployment status
      run: |
        echo "Checking Helm release status..."
        helm list -n helpninja
        echo "Checking Helm deployment values..."
        helm get values helpninja -n helpninja

    - name: Verify deployment
      run: |
        echo "Verifying production deployment..."
        kubectl get namespace helpninja || echo "Production namespace not found"
        kubectl get pods -n helpninja || echo "No production pods found"
        kubectl get svc -n helpninja || echo "No production services found"
        kubectl get ingress -n helpninja || echo "No production ingress found"

    - name: Check deployments
      run: |
        echo "Checking production deployment..."
        kubectl get deployments --all-namespaces | grep helpninja || echo "No helpninja deployments found"
        kubectl get deployment helpninja -n helpninja || echo "Production deployment not found"

    - name: Health check
      run: |
        echo "Waiting for production deployment to be available..."
        if kubectl get deployment helpninja -n helpninja >/dev/null 2>&1; then
          kubectl wait --for=condition=available --timeout=300s deployment/helpninja -n helpninja
          echo "Production deployment is ready!"
        else
          echo "Production deployment not found, skipping health check"
          exit 1
        fi
