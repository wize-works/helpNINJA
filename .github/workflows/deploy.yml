name: Deploy to Azure Kubernetes

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ${{ secrets.ACR_NAME }}.azurecr.io
  IMAGE_NAME: helpninja

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Log in to Azure Container Registry
      run: |
        az acr login --name ${{ secrets.ACR_NAME }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Install kubelogin
      uses: azure/use-kubelogin@v1
      with:
        kubelogin-version: v0.0.25

    - name: Set AKS Context with admin access
      uses: azure/aks-set-context@v4
      with:
        cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
        resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
        admin: true

    - name: Deploy to Production
      if: github.ref == 'refs/heads/main'
      run: |
        # Extract the short tag from metadata output
        SHORT_TAG=$(echo "${{ steps.meta.outputs.tags }}" | grep -o 'main-[a-f0-9]\{7\}' | head -1)
        IMAGE_FULL="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SHORT_TAG}"
        echo "Deploying with image: ${IMAGE_FULL}"
        
        # Create namespace first
        kubectl apply -f ./k8s/namespace.yaml
        
        # Replace placeholders in YAML files with actual values
        echo "=== UPDATING CONFIGURATION ==="
        
        # Update deployment with correct image
        sed "s|IMAGE_PLACEHOLDER|${IMAGE_FULL}|g" ./k8s/deployment.yaml > /tmp/deployment.yaml
        
        # Update configmap with Supabase URL
        sed "s|SUPABASE_URL_PLACEHOLDER|${{ secrets.SUPABASE_URL }}|g" ./k8s/configmap.yaml > /tmp/configmap.yaml
        
        # Create secrets using kubectl (more reliable than YAML placeholders)
        echo "=== CREATING SECRETS ==="
        kubectl create secret generic helpninja-secrets \
          --namespace=helpninja \
          --from-literal=OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
          --from-literal=OPENAI_CHAT_MODEL="${{ secrets.OPENAI_CHAT_MODEL }}" \
          --from-literal=OPENAI_EMBED_MODEL="${{ secrets.OPENAI_EMBED_MODEL }}" \
          --from-literal=DATABASE_URL="${{ secrets.DATABASE_URL }}" \
          --from-literal=STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}" \
          --from-literal=STRIPE_WEBHOOK_SECRET="${{ secrets.STRIPE_WEBHOOK_SECRET }}" \
          --from-literal=STRIPE_PRICE_STARTER="${{ secrets.STRIPE_PRICE_STARTER }}" \
          --from-literal=STRIPE_PRICE_PRO="${{ secrets.STRIPE_PRICE_PRO }}" \
          --from-literal=STRIPE_PRICE_AGENCY="${{ secrets.STRIPE_PRICE_AGENCY }}" \
          --from-literal=SUPABASE_SERVICE_ROLE_KEY="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
          --from-literal=SLACK_WEBHOOK_URL="${{ secrets.SLACK_WEBHOOK_URL }}" \
          --from-literal=RESEND_API_KEY="${{ secrets.RESEND_API_KEY }}" \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Apply all Kubernetes resources
        echo "=== DEPLOYING RESOURCES ==="
        kubectl apply -f /tmp/configmap.yaml
        kubectl apply -f /tmp/deployment.yaml
        kubectl apply -f ./k8s/service.yaml
        kubectl apply -f ./k8s/ingress.yaml
        kubectl apply -f ./k8s/hpa.yaml
        
        # Wait for deployment to be ready
        echo "=== WAITING FOR DEPLOYMENT ==="
        kubectl rollout status deployment/helpninja -n helpninja --timeout=300s
        
        echo "Deployment completed successfully!"

    - name: Verify deployment
      run: |
        echo "Verifying production deployment..."
        kubectl get namespace helpninja
        kubectl get pods -n helpninja
        kubectl get svc -n helpninja
        kubectl get ingress -n helpninja

    - name: Check deployments
      run: |
        echo "Checking production deployment status..."
        kubectl get deployments -n helpninja
        kubectl describe deployment helpninja -n helpninja

    - name: Health check
      run: |
        echo "Performing health check..."
        kubectl wait --for=condition=available --timeout=300s deployment/helpninja -n helpninja
        echo "Production deployment is ready and healthy!"
